{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/time.js","webpack:///./src/utils.js","webpack:///./src/spriteSelector.js","webpack:///./src/spriteMethods.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","secondsTimer","document","getElementById","minutesTimer","hourTimer","timer","startTimer","seconds","innerHTML","minutes","hours","setInterval","isTimerPaused","restartTimer","clearInterval","pause","loop","stop","changeEventHandler","event","target","this","id","amountToSpawn","gSize","gSpeed","gFertilityRate","gFertilityProgress","gTotalHunger","gHealth","gDamage","gDefence","alert","getRandomInt","min","max","Math","ceil","floor","random","setError","message","errorText","removeAttribute","window","togglePause","isStopped","start","selectedSpriteInfo","clearSelectedSpriteAndInterval","sprite","interval","displaySpriteProps","listOfSprites","createElement","shownProps","entries","map","prop","length","li","liContent","createTextNode","appendChild","spriteUniqueId","createSprite","x","y","size","speed","fertilityRate","totalFertilityProgress","totalHunger","health","damage","defence","kontra","selected","color","width","height","ttl","Infinity","dx","dy","isFertile","fertilityProgress","hunger","totalHealth","sight","diseased","isColliding","onUp","sprites","forEach","otherSprite","push","pointer","track","breed","spriteA","spriteB","assign","randomMutation","position","_x","_y","infinityGauntlet","numberOfSpitesToCull","round","starve","src_errorText","sim","src_form","addEventListener","querySelector","onchange","startGame","setAttribute","init","spriteCount","restart","canvasSize","createSprites","gameLoop","[object Object]","update","canvas","spriteCanvasBoundaryChecker","spritePropsChecker","j","a","b","collisionDetection","filter","isAlive","render","stopGame"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const secondsTimer = document.getElementById(\"seconds\");\r\nconst minutesTimer = document.getElementById(\"minutes\");\r\nconst hourTimer = document.getElementById(\"hours\");\r\nlet timer = null;\r\nwindow.isTimerPaused = false;\r\n\r\nfunction startTimer() {\r\n  let seconds = 0;\r\n  secondsTimer.innerHTML = 0;\r\n  let minutes = 0;\r\n  minutesTimer.innerHTML = 0;\r\n  let hours = 0;\r\n  hourTimer.innerHTML = 0;\r\n  timer = setInterval(() => {\r\n    if (!isTimerPaused) {\r\n      seconds += 1;\r\n      if (seconds === 60) {\r\n        minutes += 1;\r\n        seconds = 0;\r\n        minutesTimer.innerHTML = minutes;\r\n      }\r\n      if (minutes === 60) {\r\n        hours += 1;\r\n        minutes = 0;\r\n        hourTimer.innerHTML = hours;\r\n      }\r\n      secondsTimer.innerHTML = seconds;\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nexport function restartTimer() {\r\n  if (timer) {\r\n    clearInterval(timer);\r\n    startTimer();\r\n  } else {\r\n    startTimer();\r\n  }\r\n}\r\n\r\nwindow.togglePause = function() {\r\n  //TODO: Fix pause breaking which sprite is selected.\r\n  if (loop.isStopped) {\r\n    loop.start();\r\n  } else {\r\n    loop.stop();\r\n  }\r\n  isTimerPaused = !isTimerPaused;\r\n};\r\n\r\nexport function pause() {\r\n  loop.stop();\r\n  isTimerPaused = true;\r\n}\r\n","export function changeEventHandler(event) {\r\n  // You can use “this” to refer to the selected element.\r\n  if (!event.target.value) {\r\n    alert(\"All fields must have a value\");\r\n    if (this.id === \"amount\") {\r\n      event.target.value = amountToSpawn;\r\n    } else if (this.id === \"size\") {\r\n      event.target.value = gSize;\r\n    } else if (this.id === \"speed\") {\r\n      event.target.value = gSpeed;\r\n    } else if (this.id === \"fertilityRate\") {\r\n      event.target.value = gFertilityRate;\r\n    } else if (this.id === \"fertilityProgress\") {\r\n      event.target.value = gFertilityProgress;\r\n    } else if (this.id === \"totalHunger\") {\r\n      event.target.value = gTotalHunger;\r\n    } else if (this.id === \"health\") {\r\n      event.target.value = gHealth;\r\n    } else if (this.id === \"damage\") {\r\n      event.target.value = gDamage;\r\n    } else if (this.id === \"defence\") {\r\n      event.target.value = gDefence;\r\n    }\r\n  } else {\r\n    if (this.id === \"amount\") {\r\n      amountToSpawn = event.target.value;\r\n    } else if (this.id === \"size\") {\r\n      gSize = event.target.value;\r\n    } else if (this.id === \"speed\") {\r\n      gSpeed = event.target.value;\r\n    } else if (this.id === \"fertilityRate\") {\r\n      gFertilityRate = event.target.value;\r\n    } else if (this.id === \"fertilityProgress\") {\r\n      gFertilityProgress = event.target.value;\r\n    } else if (this.id === \"totalHunger\") {\r\n      gTotalHunger = event.target.value;\r\n    } else if (this.id === \"health\") {\r\n      gHealth = event.target.value;\r\n    } else if (this.id === \"damage\") {\r\n      gDamage = event.target.value;\r\n    } else if (this.id === \"defence\") {\r\n      gDefence = event.target.value;\r\n    }\r\n  }\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function setError(message) {\r\n  errorText.removeAttribute(\"style\");\r\n  errorText.innerHTML = message;\r\n}\r\n\r\nexport function isCollide(a, b) {\r\n  return !(\r\n    a.y + a.height < b.y ||\r\n    a.y > b.y + b.height ||\r\n    a.x + a.width < b.x ||\r\n    a.x > b.x + b.width\r\n  );\r\n}\r\n","const selectedSpriteInfo = document.getElementById(\"selectedSpriteInfo\");\r\n\r\nexport function clearSelectedSpriteAndInterval(sprite) {\r\n  selectedSpriteInfo.innerHTML = \"\";\r\n  clearInterval(sprite.interval);\r\n}\r\n\r\nfunction displaySpriteProps(sprite) {\r\n  selectedSpriteInfo.innerHTML = \"\";\r\n  let listOfSprites = document.createElement(\"ul\");\r\n  const shownProps = [\r\n    \"height\",\r\n    \"width\",\r\n    \"color\",\r\n    \"speed\",\r\n    \"isFertile\",\r\n    \"fertilityRate\",\r\n    \"fertilityProgress\",\r\n    \"hunger\",\r\n    \"totalHunger\",\r\n    \"health\",\r\n    \"totalHealth\",\r\n    \"damage\",\r\n    \"defence\",\r\n    \"sight\"\r\n  ];\r\n  Object.entries(sprite).map(prop => {\r\n    for (let i = 0; i < shownProps.length - 1; i++) {\r\n      if (prop[0] === shownProps[i]) {\r\n        let li = document.createElement(\"li\");\r\n        let liContent = document.createTextNode(prop[0] + \": \" + prop[1]);\r\n        li.appendChild(liContent);\r\n        listOfSprites.appendChild(li);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n  selectedSpriteInfo.appendChild(listOfSprites);\r\n}\r\n\r\nexport function handleSpriteOnClick(sprite) {\r\n  sprites.forEach(otherSprite => {\r\n    if (sprite !== otherSprite) {\r\n      otherSprite.selected = \"false\";\r\n      clearInterval(otherSprite.interval);\r\n      otherSprite.color = \"red\";\r\n    }\r\n  });\r\n  if (sprite.selected !== \"true\") {\r\n    clearInterval(sprite);\r\n    sprite.color = \"green\";\r\n    sprite.selected = \"true\";\r\n    displaySpriteProps(sprite);\r\n    sprite.interval = setInterval(() => {\r\n      if (!isTimerPaused) {\r\n        displaySpriteProps(sprite);\r\n      }\r\n    }, 100);\r\n  }\r\n}\r\n","import { handleSpriteOnClick } from \"./spriteSelector\";\r\nimport { getRandomInt, isCollide } from \"./utils\";\r\nimport { clearSelectedSpriteAndInterval } from \"./spriteSelector\";\r\n\r\nlet spriteUniqueId = 1;\r\n\r\nexport function collisionDetection() {\r\n  for (let i = 0; i < sprites.length - 1; i++) {\r\n    for (let j = i + 1; j < sprites.length; j++) {\r\n      if (isCollide(sprites[i], sprites[j]) && sprites[i] !== sprites[j]) {\r\n        sprites[i].isColliding = true;\r\n        sprites[j].isColliding = true;\r\n        if (sprites[i].isFertile && sprites[j].isFertile) {\r\n          breed(sprites[i], sprites[j]);\r\n        } else {\r\n          feed(sprites[i], sprites[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function spriteCanvasBoundaryChecker(sprite) {\r\n  // sprite is beyond the left edge\r\n  if (sprite.x < 0) {\r\n    sprite.x = kontra.canvas.width;\r\n  }\r\n  // sprite is beyond the right edge\r\n  else if (sprite.x > kontra.canvas.width) {\r\n    sprite.x = 0;\r\n  }\r\n  // sprite is beyond the top edge\r\n  if (sprite.y < 0) {\r\n    sprite.y = kontra.canvas.height;\r\n  }\r\n  // sprite is beyond the bottom edge\r\n  else if (sprite.y > kontra.canvas.height) {\r\n    sprite.y = 0;\r\n  }\r\n}\r\n\r\nexport function spritePropsChecker(sprite) {\r\n  //TODO: Fix fertilityRate > default - Should be fixed (check)\r\n  //TODO: Fix fertilityProgress > default - Should be fixed (check)\r\n  //TODO: Fix healing when defence higher than damage - Should be fixed (check)\r\n  if (sprite.hunger >= sprite.totalHunger * 0.8) {\r\n    if (sprite.health < sprite.totalHealth) {\r\n      sprite.health += 1;\r\n    }\r\n  }\r\n  if (sprite.health <= 0) {\r\n    if (sprite.interval) {\r\n      clearSelectedSpriteAndInterval(sprite);\r\n    }\r\n    sprite.ttl = 0;\r\n  }\r\n  if (sprite.hunger <= 0) {\r\n    if (sprite.health > 0) {\r\n      sprite.health -= 1;\r\n    }\r\n  }\r\n  if (sprite.hunger > 0) {\r\n    sprite.hunger -= 1;\r\n  }\r\n  if (!sprite.isFertile) {\r\n    if (sprite.fertilityProgress < sprite.totalFertilityProgress) {\r\n      sprite.fertilityProgress += sprite.fertilityRate;\r\n    }\r\n    if (sprite.fertilityProgress >= sprite.totalFertilityProgress) {\r\n      sprite.isFertile = true;\r\n      sprite.fertilityProgress = 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport function createSprite(\r\n  x,\r\n  y,\r\n  size,\r\n  speed,\r\n  fertilityRate,\r\n  totalFertilityProgress,\r\n  totalHunger,\r\n  health,\r\n  damage,\r\n  defence\r\n) {\r\n  //TODO: Fix size being anything other than 25 being selectable and collide-able\r\n  spriteUniqueId += 1;\r\n  let sprite = kontra.sprite({\r\n    id: spriteUniqueId,\r\n    selected: false,\r\n    interval: null,\r\n    x: x, //Math.floor(Math.random() * canvasSize.x)\r\n    y: y, //Math.floor(Math.random() * canvasSize.y)\r\n    color: \"red\",\r\n    width: size, //25\r\n    height: size, //25\r\n    ttl: Infinity,\r\n    speed: speed,\r\n    dx: Math.random() * speed - 2,\r\n    dy: Math.random() * speed - 2,\r\n    isFertile: false,\r\n    fertilityRate: fertilityRate, //1\r\n    fertilityProgress: 0, // 1000\r\n    totalFertilityProgress: totalFertilityProgress, // 1000\r\n    hunger: totalHunger, //1000\r\n    totalHunger: totalHunger, //1000\r\n    health: health, //1000\r\n    totalHealth: health, //1000\r\n    damage: damage, //1\r\n    defence: defence, //0\r\n    sight: 0,\r\n    diseased: { diseased: false, damage: 0 },\r\n    isColliding: false,\r\n    onUp: function() {\r\n      handleSpriteOnClick(this);\r\n    }\r\n  });\r\n  sprites.push(sprite);\r\n  kontra.pointer.track(sprite);\r\n}\r\n\r\nexport function createSprites() {\r\n  const canvasSize = { x: 800, y: 600 };\r\n  for (let i = 0; i < amountToSpawn; i++) {\r\n    createSprite(\r\n      Math.floor(Math.random() * canvasSize.x),\r\n      Math.floor(Math.random() * canvasSize.y),\r\n      gSize,\r\n      gSpeed,\r\n      gFertilityRate,\r\n      gFertilityProgress,\r\n      gTotalHunger,\r\n      gHealth,\r\n      gDamage,\r\n      gDefence\r\n    );\r\n  }\r\n}\r\n\r\nexport function breed(spriteA, spriteB) {\r\n  let sprite = {};\r\n  if (getRandomInt(1, 2) === 1) {\r\n    sprite = Object.assign({}, spriteA);\r\n  } else {\r\n    sprite = Object.assign({}, spriteB);\r\n  }\r\n  sprite.size = getRandomInt(1, 2) === 1 ? spriteA.width : spriteB.width;\r\n  sprite.speed = getRandomInt(1, 2) === 1 ? spriteA.speed : spriteB.speed;\r\n  sprite.fertilityRate =\r\n    getRandomInt(1, 2) === 1 ? spriteA.fertilityRate : spriteB.fertilityRate;\r\n  sprite.totalFertilityProgress =\r\n    getRandomInt(1, 2) === 1\r\n      ? spriteA.totalFertilityProgress\r\n      : spriteB.totalFertilityProgress;\r\n  sprite.totalHunger =\r\n    getRandomInt(1, 2) === 1 ? spriteA.totalHunger : spriteB.totalHunger;\r\n  sprite.totalHealth =\r\n    getRandomInt(1, 2) === 1 ? spriteA.totalHealth : spriteB.totalHealth;\r\n  sprite.damage = getRandomInt(1, 2) === 1 ? spriteA.damage : spriteB.damage;\r\n  sprite.defence = getRandomInt(1, 2) === 1 ? spriteA.defence : spriteB.defence;\r\n  //TODO: Add colour that changes slightly from the parents\r\n  const randomMutation = getRandomInt(1, 8);\r\n  if (randomMutation === 1) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.size += 5;\r\n    } else {\r\n      if (sprite.size > 5) {\r\n        sprite.size -= 5;\r\n      }\r\n    }\r\n  } else if (randomMutation === 2) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.speed += 1;\r\n    } else {\r\n      if (sprite.speed >= 1) {\r\n        sprite.speed -= 1;\r\n      }\r\n    }\r\n  } else if (randomMutation === 3) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.fertilityRate += 1;\r\n    } else {\r\n      if (sprite.fertilityRate >= 1) {\r\n        sprite.fertilityRate -= 1;\r\n      }\r\n    }\r\n  } else if (randomMutation === 4) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.totalHunger += 100;\r\n    } else {\r\n      if (sprite.totalHunger > 100) {\r\n        sprite.totalHunger -= 100;\r\n      }\r\n    }\r\n  } else if (randomMutation === 5) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.totalHealth += 10;\r\n    } else {\r\n      if (sprite.totalHealth >= 10) {\r\n        sprite.totalHealth -= 10;\r\n      }\r\n    }\r\n  } else if (randomMutation === 6) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.damage += 1;\r\n    } else {\r\n      if (sprite.damage >= 1) {\r\n        sprite.damage -= 1;\r\n      }\r\n    }\r\n  } else if (randomMutation === 7) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.defence += 1;\r\n    } else {\r\n      if (sprite.defence >= 1) {\r\n        sprite.defence -= 1;\r\n      }\r\n    }\r\n  } else if (randomMutation === 8) {\r\n    if (getRandomInt(1, 2) === 1) {\r\n      sprite.totalFertilityProgress += 10;\r\n    } else {\r\n      if (sprite.totalFertilityProgress >= 10) {\r\n        sprite.totalFertilityProgress -= 10;\r\n      }\r\n    }\r\n  }\r\n\r\n  createSprite(\r\n    sprite.position._x,\r\n    sprite.position._y,\r\n    sprite.size,\r\n    sprite.speed,\r\n    sprite.fertilityRate,\r\n    sprite.totalFertilityProgress,\r\n    sprite.totalHunger,\r\n    sprite.totalHealth,\r\n    sprite.damage,\r\n    sprite.defence\r\n  );\r\n  spriteA.isFertile = false;\r\n  spriteB.isFertile = false;\r\n}\r\n\r\nexport function feed(spriteA, spriteB) {\r\n  if (spriteA.health > 0) {\r\n    if (spriteA.defence < spriteB.damage) {\r\n      spriteA.health -= spriteB.damage - spriteA.defence;\r\n    }\r\n  }\r\n  if (spriteA.hunger < spriteA.totalHunger - 10) {\r\n    spriteA.hunger += 10;\r\n  }\r\n  if (spriteB.health > 0) {\r\n    if (spriteB.defence < spriteA.damage) {\r\n      spriteB.health -= spriteA.damage - spriteB.defence;\r\n    }\r\n  }\r\n  if (spriteB.hunger < spriteB.totalHunger) {\r\n    spriteB.hunger += 1;\r\n  }\r\n}\r\n\r\nwindow.infinityGauntlet = function() {\r\n  let numberOfSpitesToCull = Math.round(sprites.length / 2);\r\n  for (let i = 0; i < numberOfSpitesToCull; i++) {\r\n    if (sprites[i].interval) {\r\n      clearSelectedSpriteAndInterval(sprites[i]);\r\n    }\r\n    sprites[i].ttl = 0;\r\n  }\r\n};\r\n\r\nwindow.starve = function() {\r\n  for (let i = 0; i < sprites.length - 1; i++) {\r\n    sprites[i].hunger = 0;\r\n  }\r\n};\r\n","import { restartTimer, pause } from \"./time\";\r\nimport { setError, changeEventHandler } from \"./utils\";\r\nimport {\r\n  collisionDetection,\r\n  spriteCanvasBoundaryChecker,\r\n  spritePropsChecker,\r\n  createSprites\r\n} from \"./spriteMethods\";\r\nimport { clearSelectedSpriteAndInterval } from \"./spriteSelector\";\r\n\r\n// Globals\r\nconst errorText = document.getElementById(\"errorText\");\r\nconst sim = document.getElementById(\"sim\");\r\nconst form = document.getElementById(\"form\");\r\nwindow.amountToSpawn = 50;\r\nwindow.gSize = 25;\r\nwindow.gSpeed = 4;\r\nwindow.gFertilityRate = 1;\r\nwindow.gFertilityProgress = 1000;\r\nwindow.gTotalHunger = 2000;\r\nwindow.gHealth = 2000;\r\nwindow.gDamage = 10;\r\nwindow.gDefence = 5;\r\n\r\ndocument.getElementById(\"amount\").value = amountToSpawn;\r\ndocument.getElementById(\"size\").value = gSize;\r\ndocument.getElementById(\"speed\").value = gSpeed;\r\ndocument.getElementById(\"fertilityRate\").value = gFertilityRate;\r\ndocument.getElementById(\"fertilityProgress\").value = gFertilityProgress;\r\ndocument.getElementById(\"totalHunger\").value = gTotalHunger;\r\ndocument.getElementById(\"health\").value = gHealth;\r\ndocument.getElementById(\"damage\").value = gDamage;\r\ndocument.getElementById(\"defence\").value = gDefence;\r\n\r\ndocument.addEventListener(\r\n  \"DOMContentLoaded\",\r\n  function() {\r\n    document.querySelector('input[id=\"amount\"]').onchange = changeEventHandler;\r\n    document.querySelector('input[id=\"size\"]').onchange = changeEventHandler;\r\n    document.querySelector('input[id=\"speed\"]').onchange = changeEventHandler;\r\n    document.querySelector(\r\n      'input[id=\"fertilityRate\"]'\r\n    ).onchange = changeEventHandler;\r\n    document.querySelector(\r\n      'input[id=\"fertilityProgress\"]'\r\n    ).onchange = changeEventHandler;\r\n    document.querySelector(\r\n      'input[id=\"totalHunger\"]'\r\n    ).onchange = changeEventHandler;\r\n    document.querySelector('input[id=\"health\"]').onchange = changeEventHandler;\r\n    document.querySelector('input[id=\"damage\"]').onchange = changeEventHandler;\r\n    document.querySelector('input[id=\"defence\"]').onchange = changeEventHandler;\r\n  },\r\n  false\r\n);\r\n\r\nwindow.startGame = function() {\r\n  form.setAttribute(\"style\", \"display:none;\");\r\n  sim.removeAttribute(\"style\");\r\n  kontra.init();\r\n\r\n  window.sprites = [];\r\n  const spriteCount = document.getElementById(\"spriteCount\");\r\n  window.restart = function() {\r\n    sprites.forEach(sprite => {\r\n      clearSelectedSpriteAndInterval(sprite);\r\n    });\r\n    if (!loop.isStopped) {\r\n      loop.stop();\r\n    }\r\n    sprites = [];\r\n    errorText.setAttribute(\"style\", \"display:none;\");\r\n    isTimerPaused = false;\r\n    createSprites();\r\n    restartTimer();\r\n    loop.start();\r\n  };\r\n\r\n  window.loop = kontra.gameLoop({\r\n    update() {\r\n      sprites.map(sprite => {\r\n        sprite.update();\r\n        spriteCanvasBoundaryChecker(sprite);\r\n        spritePropsChecker(sprite);\r\n      });\r\n\r\n      sprites.forEach((sprite, i) => {\r\n        sprite.isColliding = false;\r\n      });\r\n\r\n      collisionDetection();\r\n\r\n      sprites = sprites.filter(sprite => sprite.isAlive());\r\n\r\n      // Colour isColliding checker\r\n      // sprites.forEach((sprite, i) =>\r\n      //   sprite.isColliding ? (sprite.color = \"green\") : (sprite.color = \"red\")\r\n      // );\r\n\r\n      spriteCount.innerHTML = sprites.length;\r\n\r\n      if (sprites.length >= 400) {\r\n        pause();\r\n        setError(\"Exponential growth detected... Sim over; please restart.\");\r\n      } else if (sprites.length <= 0) {\r\n        pause();\r\n        setError(\"All sprites are dead... Sim over; please restart.\");\r\n      }\r\n    },\r\n    render() {\r\n      sprites.map(sprite => sprite.render());\r\n    }\r\n  });\r\n};\r\n\r\nwindow.stopGame = function() {\r\n  sprites.forEach(sprite => {\r\n    clearSelectedSpriteAndInterval(sprite);\r\n  });\r\n  isTimerPaused = false;\r\n  restartTimer();\r\n  sprites = [];\r\n  errorText.setAttribute(\"style\", \"display:none;\");\r\n  sim.setAttribute(\"style\", \"display:none;\");\r\n  form.removeAttribute(\"style\");\r\n};\r\n"],"sourceRoot":""}